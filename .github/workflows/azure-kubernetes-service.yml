name: Build & Deploy to Azure
on:
  workflow_dispatch:
  push:
    branches:
      - main
#      - develop

env:
  azure_registry_username: ${{secrets.AZURE_REGISTRY_USERNAME}}
  azure_registry_password: ${{secrets.AZURE_REGISTRY_PASSWORD}}
  azure_registry: ${{secrets.AZURE_REGISTRY}}
  repo_name: ${{secrets.REPO_NAME}}
  azure_credentials: ${{secrets.AZURE_CREDENTIALS}}
  azure_cluster_url: ${{secrets.AZURE_CLUSTER_URL}}
  azure_cluster_token: ${{secrets.AZURE_CLUSTER_TOKEN}}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Mode Name
        id: mode
        run: |
          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "mode_name=prod" >> $GITHUB_ENV
          elif [[ "${{github.base_ref}}" == "develop" || "${{github.ref}}" == "refs/heads/develop" ]]; then
            echo "mode_name=dev" >> $GITHUB_ENV
          fi
      - name: Check Mode Name
        run: echo ${{ env.mode_name }}
      - uses: satackey/action-docker-layer-caching@v0.0.4
      - name: Build & Push Actions
        uses: docker/build-push-action@v1
        with:
          username: ${{env.azure_registry_username}}
          password: ${{env.azure_registry_password}}
          registry: ${{env.azure_registry}}
          repository: ${{env.mode_name}}-${{env.repo_name}}
          tag_with_sha: true



# # This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
# #
# # This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# # The ACR should be attached to the AKS cluster
# # For instructions see:
# #   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
# #   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
# #   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
# #   - https://github.com/Azure/aks-create-action
# #
# # To configure this workflow:
# #
# # 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
# #    - AZURE_CLIENT_ID
# #    - AZURE_TENANT_ID
# #    - AZURE_SUBSCRIPTION_ID
# #
# # 2. Set the following environment variables (or replace the values below):
# #    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
# #    - RESOURCE_GROUP (where your cluster is deployed)
# #    - CLUSTER_NAME (name of your AKS cluster)
# #    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
# #    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
# #    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
# #
# # For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# # For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# # For more options with the actions used below please refer to https://github.com/Azure/login

# name: Build and deploy an app to AKS

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# env:
#   AZURE_CONTAINER_REGISTRY: ${{secrets.AZURE_REGISTRY}}
#   CONTAINER_NAME: ${{secrets.AZURE_REGISTRY_USERNAME}}
#   CONTAINER_PASSWORD: ${{secrets.AZURE_REGISTRY_PASSWORD}}
#   IMAGE_NAME: dharapat-prime-bank-cib
#   IMAGE_TAG: 1.0.${{github.run_number}}
#   RESOURCE_GROUP: ${{secrets.AZURE_REGISTRY_USERNAME}}
#   CLUSTER_NAME: ${{secrets.AZURE_CLUSTER_NAME}}
#   AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
#   DEPLOYMENT_MANIFEST_PATH: ${{github.workspace}}/k8s/templates/

# jobs:
#   buildImage:
#     permissions:
#       contents: read
#       id-token: write
#     runs-on: ubuntu-latest
#     steps:
#       # Checks out the repository this file is in
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Build docker image
#         run:
#          docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} -f ${{github.workspace}}/DockerFile .
      
#       - name: Login to Container Registry
#         uses: azure/docker-login@v1
#         with:
#           login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
#           username: ${{ env.CONTAINER_NAME }}
#           password: ${{ env.CONTAINER_PASSWORD }}
      
#       - name: Push Docker image to Azure Container Registry
#         run: |
#           docker tag ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} ${{env.AZURE_CONTAINER_REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
#           docker push ${{env.AZURE_CONTAINER_REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

#   deploy:
#     permissions:
#       actions: read
#       contents: read
#       id-token: write
#     runs-on: ubuntu-latest
#     needs: [buildImage]
#     steps:
#       # Checks out the repository this file is in
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Use kubelogin to configure your kubeconfig for Azure auth
#       - name: Install Kubectl
#         uses: azure/setup-kubectl@v1
#       - name: Login to AKS cluster
#         uses: azure/login@v1
#         with:
#           creds: ${{ env.AZURE_CREDENTIALS }}
#           # cluster-name: ${{env.CLUSTER_NAME}}
#           # resource-group: ${{env.RESOURCE_GROUP}}

#       # # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
#       - name: Get K8s context
#         uses: azure/aks-set-context@v3
#         with:
#           subscription: ${{ env.AZURE_SUBSCRIPTION_ID }}
#           # resource-group: ${{ env.RESOURCE_GROUP }}
#           # cluster-name: ${{ env.CLUSTER_NAME }}
#           admin: 'false'
#           use-kubelogin: 'true'

#       # Deploys application based on given manifest file
#       - name: Deploys application
#         uses: Azure/k8s-deploy@v4
#         with:
#           action: deploy
#           manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
#           images: |
#             ${{env.AZURE_CONTAINER_REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
